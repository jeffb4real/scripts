abcda
121
1111
11433411

 8 -> false
 121 -> true
 
 1) single char -> false
 2) non-digit char(s) -> false
 3) negative number -> false
 4) integer -> true/false
 5) float -> false
 
 1 -> 11 
 11 -> 22
 120 -> 121
 5 -> 11
 80 -> 88
 -12 -> 11
 
 Next sequential palindrome tests:
 1) non-digit char(s) -> TypeError assert
 2) any negative number -> return 11
 3) single digit -> return 11
 4) multiple digits -> return next palindrome
 5) palindrome -> return next palindrome
 6) overflow int data type -> assert
 
 next_palindrome.py
 def next_palindrome(arg):
     
     ''' This function returns the next sequential palindrome.
     Input should be a +/- integer.'''
     
     if 'int' not in str(type(arg)):
         return false
     
     next_palindrome = 11
     if arg <= 0:
         return next_palindrome
     
     if arg < 11:
         return next_palindrome
     
     inf = 65535   # prevent overflow; max 16-bit int
     while candidate in range(arg + 1, inf):
         return candidate if is_palindrome(candidate)
         
 def is_palindrome(arg):
    # arg is known to be int
    if len(arg) == 1:
        return false
    
    var = str(arg)    # e.g. 1221, 121
    length = len(arg)
    x == -1
    for char in (var):
        if char == char[::x]
            x -= 1
            
            
    return true / false
    